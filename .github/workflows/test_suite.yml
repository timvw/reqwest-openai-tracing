name: "Test Suite"
on:
  push:
    branches-ignore:
      - 'dependabot/**' #avoid duplicates: only run the PR, not the push
      - 'renovate/**' #avoid duplicates: only run the PR, not the push
      - 'release-plz**' #avoid duplicates: only run the PR, not the push
      - 'gh-pages' #github pages do not trigger all tests
    tags-ignore:
      - 'v*' #avoid rerun existing commit on release
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    if: (github.event_name != 'pull_request' && ! github.event.pull_request.head.repo.fork) || (github.event_name == 'pull_request' && (github.event.pull_request.head.repo.fork || startsWith(github.head_ref, 'dependabot/') || startsWith(github.head_ref, 'renovate/') || startsWith(github.head_ref, 'release-plz')))
    name: cargo test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build
        run: cargo build --all-targets

      - name: Test
        run: cargo test --all-features

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  coverage:
    if: (github.event_name != 'pull_request' && ! github.event.pull_request.head.repo.fork) || (github.event_name == 'pull_request' && (github.event.pull_request.head.repo.fork || startsWith(github.head_ref, 'dependabot/') || startsWith(github.head_ref, 'renovate/') || startsWith(github.head_ref, 'release-plz')))
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: llvm-tools-preview

      - name: Install grcov
        uses: taiki-e/install-action@v2
        with:
          tool: grcov

      - name: Build
        run: cargo build --all-targets
        env:
          RUSTFLAGS: "-Cinstrument-coverage"
          LLVM_PROFILE_FILE: "target/coverage/prof/cargo-test-%p-%m.profraw"

      - name: Test
        run: cargo test --all-features
        env:
          RUSTFLAGS: "-Cinstrument-coverage"
          LLVM_PROFILE_FILE: "target/coverage/prof/cargo-test-%p-%m.profraw"

      - name: Generate coverage report
        run: |
          grcov . --binary-path ./target/debug/deps/ \
            -s . \
            -t lcov \
            --branch \
            --ignore-not-existing \
            --ignore '../*' \
            --ignore "/*" \
            --ignore "*/tests/*" \
            -o target/coverage/tests.lcov

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: target/coverage/tests.lcov
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}